package net.alexramos.dynamodb.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.LinkedList;
import java.util.List;

import net.alexramos.dynamodb.sqlengine.DynamoSqlEngine;

public class DynamoStatement implements Statement {

    private DynamoSqlEngine sqlEngine;

    private DynamoConnection dynamoConnection;

    private DynamoResultSet result;

    private List<String> batch = new LinkedList<>();

    private int fetchSize;

    private int maxRows;

    public DynamoStatement(DynamoConnection dynamoConnection) {
	this.dynamoConnection = dynamoConnection;
	this.sqlEngine = dynamoConnection.getDynamoAdapter();
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
	throw new SQLException("Not Implemented");
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
	throw new SQLException("Not Implemented");
    }

    @Override
    public DynamoResultSet executeQuery(String sql) throws SQLException {
	return sqlEngine.executeQuery(sql);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
	return sqlEngine.executeQuery(sql).getUpdateCount();
    }

    @Override
    public void close() throws SQLException {
	this.sqlEngine = null;
	this.result = null;
	this.dynamoConnection = null;
	this.batch = null;
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
	return 0;
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
    }

    @Override
    public int getMaxRows() throws SQLException {
	return maxRows;
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
	this.maxRows = max;
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
    }

    @Override
    public int getQueryTimeout() throws SQLException {
	return 0;
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
    }

    @Override
    public void cancel() throws SQLException {
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
	return null;
    }

    @Override
    public void clearWarnings() throws SQLException {
    }

    @Override
    public void setCursorName(String name) throws SQLException {
    }

    @Override
    public boolean execute(String sql) throws SQLException {
	this.result = sqlEngine.executeQuery(sql);
	return result.getUpdateCount() == null;
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
	DynamoResultSet rs = result;
	result = null;
	return rs;
    }

    @Override
    public int getUpdateCount() throws SQLException {
	DynamoResultSet rs = result;
	result = null;
	if(rs == null || rs.getUpdateCount() == null) {
	    return -1;
	}
	else {
	    return rs.getUpdateCount();
	}
    }

    @Override
    public boolean getMoreResults() throws SQLException {
	result = null;
	return false;
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
    }

    @Override
    public int getFetchDirection() throws SQLException {
	return ResultSet.FETCH_UNKNOWN;
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
	this.fetchSize = rows;
    }

    @Override
    public int getFetchSize() throws SQLException {
	return fetchSize;
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
	return ResultSet.CONCUR_READ_ONLY;
    }

    @Override
    public int getResultSetType() throws SQLException {
	return ResultSet.TYPE_FORWARD_ONLY;
    }

    @Override
    public void addBatch(String sql) throws SQLException {
	batch.add(sql);
    }

    @Override
    public void clearBatch() throws SQLException {
	batch.clear();
    }

    @Override
    public int[] executeBatch() throws SQLException {
	try {
	    return batch.parallelStream().mapToInt(value -> {
		try {
		    return executeUpdate(value);
		} catch (SQLException e) {
		    throw new RuntimeException(e);
		}
	    }).toArray();
	} catch (RuntimeException e) {
	    if (e.getCause() instanceof SQLException) {
		throw (SQLException) e.getCause();
	    } else {
		throw e;
	    }
	}
    }

    @Override
    public Connection getConnection() throws SQLException {
	return dynamoConnection;
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
	throw new SQLException("Not Implemented.");
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
	throw new SQLException("Not Implemented.");
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
	return executeUpdate(sql);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
	return executeUpdate(sql);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
	return executeUpdate(sql);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
	return execute(sql);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
	return execute(sql);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
	return execute(sql);
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
	return ResultSet.CLOSE_CURSORS_AT_COMMIT;
    }

    @Override
    public boolean isClosed() throws SQLException {
	return sqlEngine == null;
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
    }

    @Override
    public boolean isPoolable() throws SQLException {
	return false;
    }

    @Override
    public void closeOnCompletion() throws SQLException {
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
	return false;
    }

}
